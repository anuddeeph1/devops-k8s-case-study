apiVersion: apps/v1
kind: Deployment
metadata:
  name: load-tester
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "load-testing.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "load-testing.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "load-testing.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: load-tester-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: load-tester
        image: "{{ .Values.loadTesting.image.repository }}:{{ .Values.loadTesting.image.tag }}"
        imagePullPolicy: {{ .Values.loadTesting.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        command:
        - sh
        - -c
        - |
          # Check if we have kubectl (bitnami/kubectl image) or need to use basic tools
          if command -v kubectl > /dev/null 2>&1; then
            echo "✅ kubectl found - full monitoring available"
          else
            echo "⚠️  kubectl not found - basic load testing only"
          fi
          
          # Scripts are already executable via configMap defaultMode
          
          echo "Load tester ready. Available commands:"
          echo "1. /scripts/load-test.sh - Run load test"
          echo "2. /scripts/monitor-hpa.sh - Monitor HPA status"
          echo ""
          echo "Environment variables:"
          echo "TARGET_URL=${TARGET_URL}"
          echo "DURATION=${DURATION}"
          echo "CONCURRENT_USERS=${CONCURRENT_USERS}"
          echo ""
          echo "Sleeping... Use 'kubectl exec' to run commands"
          
          # Keep container running
          while true; do
            sleep 3600
          done
        env:
        - name: TARGET_URL
          value: "http://{{ .Values.loadTesting.target.service }}:{{ .Values.loadTesting.target.port }}{{ .Values.loadTesting.target.path }}"
        - name: DURATION
          value: "{{ .Values.loadTesting.loadTest.duration }}"
        - name: CONCURRENT_USERS
          value: "{{ .Values.loadTesting.loadTest.concurrentUsers }}"
        volumeMounts:
        - name: load-test-script
          mountPath: /scripts
        resources:
          {{- toYaml .Values.loadTesting.resources | nindent 10 }}
      volumes:
      - name: load-test-script
        configMap:
          name: load-test-script
          defaultMode: 0755
      {{- with .Values.loadTesting.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.loadTesting.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.loadTesting.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
