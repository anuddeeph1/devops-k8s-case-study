apiVersion: v1
kind: ConfigMap
metadata:
  name: load-test-script
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "load-testing.labels" . | nindent 4 }}
data:
  load-test.sh: |
    #!/bin/bash
    
    # Load testing script for demonstrating HPA
    set -e
    
    TARGET_URL=${TARGET_URL:-"http://{{ .Values.loadTesting.target.service }}:{{ .Values.loadTesting.target.port }}{{ .Values.loadTesting.target.path }}"}
    DURATION=${DURATION:-"300"}
    CONCURRENT_USERS=${CONCURRENT_USERS:-"50"}
    
    echo "Starting load test..."
    echo "Target URL: $TARGET_URL"
    echo "Duration: $DURATION seconds"
    echo "Concurrent users: $CONCURRENT_USERS"
    echo "Test started at: $(date)"
    
    # Function to make HTTP requests
    make_request() {
        local url=$1
        local user_id=$2
        local request_count=0
        local start_time=$(date +%s)
        
        while [ $(($(date +%s) - start_time)) -lt $DURATION ]; do
            # Make HTTP request with curl
            response_code=$(curl -s -o /dev/null -w "%{http_code}" -H "User-Agent: LoadTest-User-$user_id" "$url" 2>/dev/null || echo "000")
            
            if [ "$response_code" = "200" ]; then
                request_count=$((request_count + 1))
                if [ $((request_count % 10)) -eq 0 ]; then
                    echo "User $user_id: $request_count successful requests"
                fi
            else
                echo "User $user_id: Request failed with code $response_code"
            fi
            
            # Small delay between requests to create steady load
            sleep 0.1
        done
        
        echo "User $user_id completed with $request_count successful requests"
    }
    
    # Start concurrent load generation
    for i in $(seq 1 $CONCURRENT_USERS); do
        make_request "$TARGET_URL" "$i" &
    done
    
    # Wait for all background jobs to complete
    wait
    
    echo "Load test completed at: $(date)"
  
